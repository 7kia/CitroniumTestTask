{
  "env": {
    "node": true,
    "es6": true,
    "mocha": true
  },
  "rules": {
    // Possible Errors
    "comma-dangle": 2,
    // disallow or enforce trailing commas
    "no-cond-assign": 2,
    // disallow assignment in conditional expressions
    "no-console": 2,
    // disallow use of 'console' in the node environment
    "no-constant-condition": 1,
    // disallow use of constant expressions in conditions
    "no-debugger": 1,
    // disallow use of debugger
    "no-dupe-args": 2,
    // disallow duplicate arguments in functions
    "no-dupe-keys": 2,
    // disallow duplicate keys when creating object literals
    "no-duplicate-case": 2,
    // disallow a duplicate case label
    "no-empty-character-class": 1,
    // disallow the use of empty character classes in regular expressions
    "no-empty": 2,
    // disallow empty statements
    "no-ex-assign": 2,
    // disallow assigning to the exception in a 'catch' block
    "no-extra-boolean-cast": 1,
    // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": 1,
    // disallow unnecessary parentheses
    "no-extra-semi": 2,
    // disallow unnecessary semicolons
    "no-func-assign": 2,
    // disallow overwriting functions written as function declarations
    "no-inner-declarations": 2,
    // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2,
    // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2,
    // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 1,
    // disallow negation of the left operand of an in expression
    "no-obj-calls": 1,
    // disallow the use of object properties of the global object
    "no-regex-spaces": 1,
    // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 1,
    // disallow sparse arrays
    "no-unexpected-multiline": 2,
    // avoid code that looks like two expressions but is actually one
    "no-unreachable": 1,
    // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2,
    // disallow comparisons with the value NaN
    "valid-jsdoc": 1,
    // ensure JSDoc comments are valid
    "valid-typeof": 1,
    // ensure that the results of typeof are compared against a valid string
    
    // Best Practices
    "accessor-pairs": 1,
    // Enforces getter/setter pairs in objects
    "block-scoped-var": 1,
    // treat var statements as if they were block scoped
    "consistent-return": 1,
    // require return statements to either always or never specify values
    "curly": 1,
    // specify curly brace conventions for all control statements
    "default-case": 1,
    // require default case in switch statements
    "dot-notation": 1,
    // encourages use of dot notation whenever possible
    "eqeqeq": 2,
    // require the use of === and !==
    "no-caller": 2,
    // disallow use of arguments.caller or arguments.callee
    "no-empty-pattern": 1,
    // disallow use of empty destructuring patterns
    "no-eq-null": 2,
    // disallow comparisons to null without a type-checking operator
    "no-eval": 2,
    // disallow use of eval()
    "no-extend-native": 1,
    // disallow adding to native types
    "no-extra-bind": 1,
    // disallow unnecessary function binding
    "no-fallthrough": 1,
    // disallow fallthrough of case statements
    "no-floating-decimal": 2,
    // disallow the use of leading or trailing decimal points in numeric literals
    "no-implied-eval": 2,
    // disallow use of eval()-like methods
    "no-iterator": 2,
    // disallow usage of __iterator__ property
    "no-lone-blocks": 1,
    // disallow unnecessary nested blocks
    "no-multi-spaces": 1,
    // disallow use of multiple spaces
    "no-native-reassign": 2,
    // disallow reassignments of native objects
    "no-new-func": 2,
    // disallow use of new operator for Function object
    "no-new-wrappers": 2,
    // disallows creating new instances of String,Number, and Boolean
    "no-new": 1,
    // disallow use of the new operator when not part of an assignment or comparison
    "no-octal-escape": 2,
    // disallow use of octal escape sequences in string literals
    "no-octal": 2,
    // disallow use of octal literals
    "no-param-reassign": 1,
    // disallow reassignment of function parameters
    "no-proto": 2,
    // disallow usage of __proto__ property
    "no-redeclare": 2,
    // disallow declaring the same variable more than once
    "no-return-assign": 2,
    // disallow use of assignment in return statement
    "no-self-compare": 1,
    // disallow comparisons where both sides are exactly the same
    "no-sequences": 1,
    // disallow use of the comma operator
    "no-throw-literal": 2,
    // restrict what can be thrown as an exception
    "no-unused-expressions": 1,
    // disallow usage of expressions in statement position
    "no-useless-call": 1,
    // disallow unnecessary .call() and .apply()
    "no-useless-concat": 1,
    // disallow unnecessary concatenation of literals or template literals
    "no-void": 2,
    // disallow use of the void operator
    "no-with": 2,
    // disallow use of the with statement
    "radix": 1,
    // require use of the second argument for parseInt()
    "wrap-iife": [
      2,
      "inside"
    ],
    // require immediate function invocation to be wrapped in parentheses
    "yoda": 1,
    // disallow Yoda conditions
    "no-plusplus": 0,
    // Variables
    "no-delete-var": 2,
    // disallow deletion of variables
    "no-label-var": 2,
    // disallow labels that share a name with a variable
    "no-shadow-restricted-names": 2,
    // disallow shadowing of names such as arguments
    "no-shadow": 1,
    // disallow declaration of variables already declared in the outer scope
    "no-undef-init": 2,
    // disallow use of undefined when initializing variables
    "no-undef": 2,
    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undefined": 1,
    // disallow use of 'undefined' variable
    "no-unused-vars": 1,
    // disallow declaration of variables that are not used in the code
    "no-use-before-define": [
      2,
      "nofunc"
    ],
    // disallow use of variables before they are defined
    
    // Node.js and CommonJS
    "handle-callback-err": 1,
    // enforce error handling in callbacks
    "no-new-require": 1,
    // disallow use of new operator with the 'require' function
    "no-path-concat": 1
    // disallow string concatenation with __dirname and __filename
  }
}

